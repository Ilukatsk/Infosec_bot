import sys
sys.path.append('..')
from database.db_control import adduser, removeuser, FindCompanies, FindProducts
from Levenshtein import distance
import random
from handlers.keyboards import main_keyboard, companies_list_keyboard
import logging
from stuff import send_text
from handlers.main_keyboard_handler import fl, holidays
import pytz
import datetime

from aiogram import Router, types, filters, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

greeting_1 = """–ü—Ä–∏–≤–µ—Ç, —è –º—É–¥—Ä—ã–π –ò–ë–æ–±–æ—Ç –∏ —è –≥–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞–≤–∞—Ç—å –æ –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –ò–ë (–Ω–æ –Ω–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö), –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞—Ö, –∞ —Ç–∞–∫–∂–µ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—ã–Ω–æ–∫ –ò–ë. –ò –ø—É—Å—Ç—å –≤–∞—à –ø—É—Ç—å –≤ –∫–∏–±–µ—Ä–±–µ–∑–µ –±—É–¥–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –º—É–¥—Ä—ã–º! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /help"""
helping = """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–¥–∏–Ω –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç –ø–æ –ò–ë. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç –ø–æ –ò–ë". –ê –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ —Ç–æ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ –ò–ë, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞ –¥–µ–Ω—å?". –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—é –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å". –ë—É–¥—å—Ç–µ –º—É–¥—Ä—ã!\n\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –ò–ë–æ–±–æ—Ç–∞\n/stop - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ò–ë–æ–±–æ—Ç–∞\n/help - –ø–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏\n/advice - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –¥–Ω—è (—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ‚Äú–ü–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç –ø–æ –ò–ë‚Äù)\n/day - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ –ò–ë (—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ‚Äú–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞ –¥–µ–Ω—å?‚Äù)\n/company - –ø–æ–∏—Å–∫ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ò–ë-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ‚Äú–ò–ë-–≤–µ–Ω–¥–æ—Ä–∞‚Äù)\n/sectype - –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø–∞–º —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã, –≤—ã–ø—É—Å–∫–∞–µ–º—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –ò–ë-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ (—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ‚Äú–¢–∏–ø—ã —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã‚Äù\n/typelist- –ø—Ä–∏ –≤–≤–æ–¥–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–¥—Ä—ã–π –ò–ë–æ–±–æ—Ç)"""
#helping = """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –ò–ë–æ–±–æ—Ç–∞\n/stop - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ò–ë–æ–±–æ—Ç–∞\n/help - –ø–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏\n/advice - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –¥–Ω—è (—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ‚Äú–ü–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç –ø–æ –ò–ë‚Äù)\n/day - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ –ò–ë (—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ‚Äú–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞ –¥–µ–Ω—å?‚Äù)\n/company - –ø–æ–∏—Å–∫ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ò–ë-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ‚Äú–ò–ë-–≤–µ–Ω–¥–æ—Ä–∞‚Äù)\n/sectype - –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø–∞–º —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã, –≤—ã–ø—É—Å–∫–∞–µ–º—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –ò–ë-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ (—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ‚Äú–¢–∏–ø—ã —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã‚Äù\n/typelist- –ø—Ä–∏ –≤–≤–æ–¥–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–¥—Ä—ã–π –ò–ë–æ–±–æ—Ç)"""
goodbye = """–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —É–º–Ω—ã–º –ò–ë–æ–±–æ—Ç–æ–º. –ë–æ–ª—å—à–µ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –Ω–µ–≥–æ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –≤–Ω–æ–≤—å –Ω–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ. –ù–∞–¥–µ—é—Å—å, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –Ω–µ–≥–æ –ø–æ–ª—å–∑—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
router = Router()
products_full = ['Antibot', 'BAS', 'Backup', 'Compliance', 'Configuration Management', 'DAG', 'DAM', 'DCAP', 'DDoS', 'DLP', 'DNS', 'DPI', 'Data Diod', 'Deception', 'Digital Risk Protection', 'E-mail', 'EDR', 'FW', 'Forensics', 'Fraud', 'IAM', 'IDS', 'IGA', 'IPT', 'IRP', 'Kubernetes', 'MDM', 'MSS', 'NAC', 'NTA', 'OSINT', 'PAM', 'PKI', 'Password', 'Risk Management', 'SD-WAN', 'SDLC', 'SGRC', 'SIEM', 'SOAR', 'SSO', 'Threat Intelligence', 'UEBA', 'URL Filtering', 'USB', 'UTM', 'VDI', 'VPN', 'Vulnerability Management', 'WAF', 'XDR', 'ZTNA', '–ê–°–£ –¢–ü', '–ê–Ω—Ç–∏–≤–∏—Ä—É—Å', '–ë–∏–æ–º–µ—Ç—Ä–∏—è', '–í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è', '–ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', '–ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–æ—Ç–æ–ø–æ–¥–¥–µ–ª–æ–∫', '–ó–∞—â–∏—â–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å', '–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –ü–ö', '–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç', '–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å', '–ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–ö–∏–±–µ—Ä–ø–æ–ª–∏–≥–æ–Ω', '–û–°', '–û–±–ª–∞–∫–æ', '–ü–≠–ú–ò–ù', '–ü–µ—Å–æ—á–Ω–∏—Ü–∞', '–ü–æ–≤—ã—à–µ–Ω–∏–µ –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏', '–°–ó–ò –æ—Ç –ù–°–î', '–°–ö–ó–ò', '–°–£–ë–î', '–°–•–î', '–¢–æ–∫–µ–Ω', '–£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', '–ß–∏–ø', '–≠–¶–ü', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–º–æ–∫']
users = {}

class ChooseCompany(StatesGroup):
    awaiting_input = State()

class ChooseProduct(StatesGroup):
    awaiting_input = State()

#------------------
command_logger = logging.getLogger(__name__)
command_logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(name)s :: %(asctime)s :: %(levelname)s :: %(message)s')
file_handler = logging.FileHandler('./logs/command_handler.log')
file_handler.setFormatter(formatter)
command_logger.addHandler(file_handler)
#------------

@router.message(filters.Command('start'))
async def start(message: types.Message):
    try:
        user_id = message.from_user.id
        adduser(str(user_id), './database/data.db', 'bot_users')
        keyboard = main_keyboard()
        await message.answer(greeting_1, reply_markup=keyboard)
        #await message.answer(greeting_2, reply_markup=keyboard)
        command_logger.info("Greeted the {} user".format(user_id))
    except:
        command_logger.exception("An error has occurred while trying to add the user {}".format(user_id))

@router.message(filters.Command('help'))
async def help(message: types.Message):
    try:
        await message.answer(helping)
        command_logger.info("Sent the bot info to the {} user".format(message.from_user.id))
    except:
        command_logger.exception("An error has occurring whu trying to send bot info to the {} user".format(message.from_user.id))

@router.message(filters.Command('stop'))
async def stop(message: types.Message):
    try:
        user_id = message.from_user.id
        removeuser(str(user_id), './database/data.db', 'bot_users')
        await message.answer(goodbye, reply_markup=types.ReplyKeyboardRemove())
        command_logger.info("Removed user {} from the list of bot users".format(message.from_user.id))
    except:
        command_logger.exception("An error has occurred while trying to remove user {} from the database".format(user_id))

@router.message(filters.Command('advice'))
async def Tip(message: types.Message):
    try:
        await message.answer(random.choice(fl))
        command_logger.info("Gave the advice to the user {}".format(message.from_user.id))
    except:
        command_logger.exception("An error has occurred while trying to give the advice to the user {}".format(message.from_user.id))

@router.message(filters.Command('day'))
async def Day(message: types.Message):
    try:
        today_date = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%d-%m")
        await message.answer(text=("–£—Ä–∞, –¥–µ–Ω—å –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –∑—Ä—è, —Ç–∞–∫ –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω—É–µ—Ç—Å—è " + holidays[today_date].split("-")[1].strip() if today_date in holidays else "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö –ò–ë-–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç ü§∑"))
        command_logger.info("Gave info about the holidays happening today to the user {}".format(message.from_user.id))
    except:
        command_logger.exception("An error has occurred while trying to give the holiday info to the user {}".format(message.from_user.id))


@router.message(filters.Command('company'))
async def ProductsByCompany(message: types.Message, state: FSMContext):
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—ã–ø—É—Å–∫–∞–µ–º—ã—Ö –µ—é —Ç–∏–ø–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–µ —Å–∞–π—Ç")
        await state.set_state(ChooseCompany.awaiting_input)
    except:
        command_logger.exception("An error has occurred while trying to give the advice to the user {}".format(message.from_user.id))
    
     
@router.message(filters.Command('sectype'))
async def CompaniesByProduct(message: types.Message, state: FSMContext):
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—Ç—ã –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –≤—ã–ø—É—Å–∫–∞—é—Ç")
        await state.set_state(ChooseProduct.awaiting_input)
    except:
        command_logger.exception("An error has occurred while trying to give the advice to the user {}".format(message.from_user.id))
    

    
@router.message(filters.Command('typelist'))
async def tag_list(message: types.Message, state: FSMContext):
    users[message.from_user.id] = 0
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n___________\n" + "".join(list(products_full[i] + "\n" for i in range(10 * users[message.from_user.id], min(10 * (users[message.from_user.id] + 1), len(products_full))))), reply_markup=companies_list_keyboard(users[message.from_user.id]))

@router.callback_query(F.data.startswith("page_"))
async def page_change(callback: types.CallbackQuery):
    if callback.data == "page_up":
        users[callback.from_user.id] += 1
    elif callback.data == "page_down":
        users[callback.from_user.id] -= 1
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n___________\n" + "".join(list(products_full[i] + "\n" for i in range(10 * users[callback.from_user.id], min(10 * (users[callback.from_user.id] + 1), len(products_full))))), reply_markup=companies_list_keyboard(users[callback.from_user.id]))

@router.message(filters.Command('easteregg'))
async def easteregg(message: types.Message, state: FSMContext):
    await message.answer("–ë—Ä–∞–≤–æ! –¢–µ–±—è –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ç—ã –∏—â–µ—à—å —á—Ç–æ-—Ç–æ –≤—ã—Ö–æ–¥—è—â–∏–µ –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ —Ä–æ–ª–∏ –ø–µ–Ω—Ç–µ—Å—Ç–µ—Ä–∞ –∏–ª–∏ –±–∞–≥—Ö–∞–Ω—Ç–µ—Ä–∞?")



    